from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import declarative_base, sessionmaker
from pgvector.sqlalchemy import Vector          # pip install pgvector psycopg[binary]
import os

DATABASE_URL = os.getenv("DATABASE_URL")
engine = create_engine(DATABASE_URL, pool_pre_ping=True)
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()

class Chunk(Base):
    __tablename__ = "chunks"
    id      = Column(Integer, primary_key=True)
    doc_id  = Column(String, index=True)
    content = Column(String)
    emb     = Column(Vector(1536))   # 1536 = OpenAI o3 embedding size



# backend/app/db.py
import os
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import sessionmaker, declarative_base
from pgvector.sqlalchemy import Vector          # <-- magic part

# ---- connection string --------------------------------------------------
DATABASE_URL = os.getenv("DATABASE_URL")  # pulled from your .env

# pool_pre_ping=True = auto-reconnect if DB restarts
engine = create_engine(DATABASE_URL, pool_pre_ping=True)

SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)
Base = declarative_base()

# ---- ORM model ----------------------------------------------------------
class Chunk(Base):
    """
    One text/code chunk + its embedding.
    emb size 1536 = OpenAI o3 / text-embedding-3-small default.
    """
    __tablename__ = "chunks"

    id       = Column(Integer, primary_key=True, index=True)
    doc_id   = Column(String, index=True)
    content  = Column(String)            # raw text
    emb      = Column(Vector(1536))      # pgvector column



# backend/app/main.py
from fastapi import FastAPI
from .db import Base, engine

app = FastAPI(title="ZoomTutor backend")

# create tables when container boots
Base.metadata.create_all(bind=engine)


@app.get("/health")
def health():
    return {"status": "ok"}
